loadstring(game:HttpGet("https://raw.githubusercontent.com/WassimALG23/Noshi/refs/heads/main/Loader"))()
local script_version = {
    -- version
    version = "1.8",
    alpha = true,
    -- event 
    Night = false,
    Bee = false,
}
if script_version.alpha == true then
    script_version.alpha = "Alpha version"
else 
    script_version.alpha = "Release version"
print("MADE BY DEAD\nScript Version " .. script_version.version .. " - " .. script_version.alpha)
local vful = script_version.version .." - ".. script_version.alpha
getgenv().vers = vful




repeat task.wait() until game:IsLoaded()
repeat task.wait() until game.Players.LocalPlayer:FindFirstChild("PlayerGui") 

local ReplicatedStorage = game:GetService("ReplicatedStorage") 
local buySeed = ReplicatedStorage.GameEvents.BuySeedStock
local buyGear = ReplicatedStorage.GameEvents.BuyGearStock
local Plant = ReplicatedStorage.GameEvents.Plant_RE
local BuyPet = ReplicatedStorage.GameEvents.BuyPetEgg
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")
local scrollingFrame = player.PlayerGui.ActivePetUI.Frame.Main.ScrollingFrame
local feedsc = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("ActivePetService")

local get_farm = require(ReplicatedStorage.Modules.GetFarm)
local farm = get_farm(player)


-- event local

player.CharacterAdded:Connect(function(char)
    character = char
    hrp = character:WaitForChild("HumanoidRootPart")
end)

local Fluent = loadstring(Game:HttpGet("https://raw.githubusercontent.com/discoart/FluentPlus/refs/heads/main/alpha.lua"))()
Button_Icon = "rbxassetid://97949487588216"
local Window = Fluent:CreateWindow({
    Title = "Grow a Garden |",
    SubTitle = "Made by Dead | Version: ".. vful,
    TabWidth = 160,
    Size = UDim2.fromOffset(500, 350),
    Acrylic = false,
    Theme = "Dark",
    Center = true,
    IsDraggable = true,
    Keybind = Enum.KeyCode.LeftControl
})

-- Local Tabs --

local main = Window:AddTab({
    Title = "main",
    Icon = "warehouse"
})

local shop = Window:AddTab({
    Title = "shop",
    Icon = "shopping-cart"
})

local plant = Window:AddTab({
    Title = "plant",
    Icon = "leaf"
})

local sell = Window:AddTab({
    Title = "sell",
    Icon = "banknote"
})


local pet = Window:AddTab({
        Title = "pet",
        Icon = "bone"
    })

local event = Window:AddTab({
    Title = "Events",
    Icon = "calendar"
})

local ui = Window:AddTab({
        Title = "UIs",
        Icon = "scroll"
    })

local playertab = Window:AddTab({
        Title = "Player",
        Icon = "user"
    })

local vuln = Window:AddTab({
        Title = "vulnerabilitys",
        Icon = "list"
    })


local config = Window:AddTab({
    Title = "config",
    Icon = "settings"
})

local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
InterfaceManager:SetLibrary(Fluent)
InterfaceManager:SetFolder("GrowAGarden")
InterfaceManager:BuildInterfaceSection(config)

-- Local Variáveis --
local fruitNames = {
    -- Basic to Prismatic crops
    "Carrot","Strawberry","Chocolate Carrot","Blueberry","Wild Carrot","Rose",
    "Tomato","Cauliflower","Pear","Raspberry","Watermelon","Pumpkin",
    "Banana","Avocado","Cantaloupe","Green Apple","Peach","Pineapple","Kiwi",
    "Bell Pepper","Prickly Pear","Parasol Flower","Cactus","Dragon Fruit",
    "Loquat","Feijoa","Rosy Delight","Dragon Pepper","Pepper","Cacao",
    "Ember Lily","Sugar Apple","Elephant Ears",
    -- Event & Exotic / Seasonal crops
    "Papaya","Passionfruit","Soul Fruit","Cursed Fruit",
    -- Lunar Glow & related
    "Nightshade","Glowshroom","Mint","Moonflower","Starfruit","Moonglow",
    "Moon Blossom","Blood Banana","Moon Melon","Celestiberry","Moon Mango",
    -- Bizzy Bee event crops including Suncoil
    "Nectarine","Hive Fruit","Foxglove","Lilac","Pink Lily","Purple Dahlia",
    "Sunflower","Lavender","Nectarshade","Lumira","Honeysuckle","Manuka Flower",
    "Dandelion","Bee Balm","Crocus","Succulent","Bendboo","Violet Corn",
    "Cocovine","Suncoil"
}

local petNames = {
    "Bear Bee", "Bee", "Black Bunny", "Blood Hedgehog", "Blood Kiwi", "Blood Owl",
    "Brown Mouse", "Bunny", "Butterfly", "Capybara", "Cat", "Caterpillar", "Chicken",
    "Chicken Zombie", "Cooked Owl", "Cow", "Crab", "Deer", "Disco Bee", "Dog", "Doge",
    "Dragonfly", "Echo Frog", "Firefly", "Flamingo", "Frog", "Giant Ant", "Golden Bee",
    "Golden Lab", "Grey Mouse", "Hedgehog", "Honey Bee", "Kiwi", "Mimic Octopus",
    "Mole", "Monkey", "Moon Cat", "Moth", "Night Owl", "Orange Tabby", "Orangutan",
    "Ostrich", "Owl", "Pack Bee", "Panda", "Peacock", "Petal Bee", "Pig", "Polar Bear",
    "Praying Mantis", "Queen Bee", "Raccoon", "Red Dragon", "Red Fox",
    "Red Giant Ant", "Rooster", "Scarlet Macaw", "Sea Otter", "Sea Turtle", "Seagull",
    "Seal", "Silver Monkey", "Snail", "Spotted Deer", "Squirrel", "Starfish",
    "Tarantula Hawk", "Toucan", "Turtle", "Wasp"
}


--[[ old
local byallseed = {"Carrot", "Strawberry", "Blueberry", "Orange Tulip", "Tomato", "Corn", "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo", "Coconut", "Cactus", "Dragon Fruit", "Mango", "Grape", "Mushroom", "Pepper", "Cacao", "Beanstalk", "Ember Lily", "Sugar Apple"}
]]

local byallseed = {
    "Carrot", "Strawberry", "Blueberry", "Tomato", "Cauliflower", "Watermelon", "Green Apple",
    "Avocado", "Banana", "Pineapple", "Kiwi", "Bell Pepper", "Prickly Pear", "Loquat",
    "Feijoa", "Sugar Apple"
}

local bygear = {"Watering Can", "Trowel", "Recall Wrench", "Basic Sprinkler", "Advanced Sprinkler", "Godly Sprinkler", "Lightning Rod", "Tanning Mirror", "Master Sprinkler", "Cleaning Spray", "Favorite Tool", "Harvest Tool", "Friendship Pot"}


local bsa = false
local bsg = false
local bsp = false 

local selectedSeeds = {}
local selectedGears = {}
local buypets = {1, 2, 3}

local step = 0.001
local x = Vector3.new(34.14344024658203, 0.13552513718605042, -112.62083435058594)
local y = Vector3.new(31.82763671875, 0.13552513718605042, -112.6816635131836)

local Pos = hrp.Position
local pos = tostring(Pos)

local walkSpeed = humanoid.WalkSpeed

local PetsId = {}

-- Local functions --

function byallseedfc()
    for i = 1, 25 do
        for _, seed in ipairs(selectedSeeds) do
            buySeed:FireServer(seed)
            task.wait()
        end
    end
end

function byallgearfc()
    for i = 1, 25 do
        for _, gear in ipairs(selectedGears) do
            buyGear:FireServer(gear)
            task.wait()
        end
    end
end

function buypetegg()
    local eggIDs = {1, 2, 3}
    for _, id in ipairs(eggIDs) do
        game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuyPetEgg"):FireServer(id)
        task.wait()
    end
end

function svp()
    Pos = hrp.Position
    pos = tostring(Pos)
end

function tpt(v3)
    if typeof(v3) == "Vector3" then
        hrp.CFrame = CFrame.new(v3)
    elseif typeof(v3) == "string" then
        local x, y, z = string.match(v3, "Vector3%s*%(([^,]+),%s*([^,]+),%s*([^)]+)%)")
        if x and y and z then
            hrp.CFrame = CFrame.new(tonumber(x), tonumber(y), tonumber(z))
        end
    end
end

function sf()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
end

function sm()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("NightQuestRemoteEvent"):FireServer("SubmitAllPlants")
end

function blah()
ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Item"):FireServer()
end

function bbf()
    svp()
    hrp.CFrame = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
    task.wait(0.25)
    blah()
    task.wait(0.2)
    tpt(Pos)
end

function tsf()
    svp()
    hrp.CFrame = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
    task.wait(0.25)
    sf()
    task.wait(0.2)
    tpt(Pos)
end

function tsm()
    svp()
    hrp.CFrame = CFrame.new(-101.0422592163086, 4.400012493133545, -10.985257148742676)
    task.wait(0.25)
    sm()
    task.wait(0.2)
    tpt(Pos)
end

function ufav()
    local char = player.Character
    local backpack = player.Backpack
    local tool = char:FindFirstChildOfClass("Tool") or backpack:FindFirstChildOfClass("Tool")

    if tool and tool:GetAttribute("Favorite") == true then
        game:GetService("ReplicatedStorage").GameEvents.Favorite_Item:FireServer({tool})
    end
end

function sellpets()
game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("SellPet_RE"):FireServer()
end


function setplace()
local currentPos = hrp.Position
        local fixedY = 0.13552513718605042

        x = Vector3.new(currentPos.X, fixedY, currentPos.Z)
        y = Vector3.new(currentPos.X, fixedY, currentPos.Z)

        print("Start (X) and End (Y) positions set to:", x)
    end

function plantdistance(input)

local num = tonumber(input)
        if num then
            step = num
            print("Step set to:", step)
        else
            warn("Invalid number entered for step.")
        end
    end



function plantfr()

        local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
        if not tool then return end

        local baseName = tool.Name:match("^(.-)%s+[Ss]eed") or tool.Name
        baseName = baseName:gsub("%s+$", "")

        if not x or not y then
            warn("❌ Please set both X and Y positions first!")
            return
        end

        local direction = (y - x).Unit
        local distance = (y - x).Magnitude

        for i = 0, distance, step do
            local pos = x + direction * i

            local args = {
                Vector3.new(pos.X, pos.Y, pos.Z), -- vector.create equivalent
                baseName
            }

            game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(unpack(args))
            task.wait()
        end
    end

function sellpetssel(state)
    autoSellEnabled = state
    if state then
        task.spawn(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local SellEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("SellPet_RE")

            while autoSellEnabled do
                local containers = { player.Backpack, player.Character }
                for _, container in ipairs(containers) do
                    for _, tool in ipairs(container:GetChildren()) do
                        if tool:IsA("Tool") then
                            local rawName = tool.Name
                            local strippedName = rawName:match("^(.-)%s*%(") or rawName -- remove (age:xx,xxkg)

                            for _, allowedName in ipairs(selectedPetsToSell) do
                                if strippedName == allowedName then
                                    local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                                    if humanoid then
                                        humanoid:EquipTool(tool)
                                        task.wait(0.2)
                                        SellEvent:FireServer()
                                        print("✅ Sold:", rawName)
                                        task.wait(5)
                                    end
                                end
                            end
                        end
                    end
                end
                task.wait(1)
            end
        end)
    end
end


function feedpet(Value)
    autoFeed = Value
    if Value then
        spawn(function()
            while autoFeed do
                if pfeed then
                    feedsc:FireServer("Feed", pfeed)
                    print("pet:", pfeed)
                else
                    print("no pets are selected")
                end
                wait(0.3)
            end
        end)
    end
end

                    




local function pollinated(toggle)
    ativo = toggle
    if not toggle then return end
        local rs = game:GetService("ReplicatedStorage")

        local function temPollinated(nome)
            return nome:lower():find("pollinated") ~= nil
        end

        -- Atualiza a lista de itens ordenados por peso
        task.spawn(function()
            while ativo do
                local novaLista = {}
                local char = player.Character or player.CharacterAdded:Wait()
                local mochila = player:FindFirstChild("Backpack")

                for _, container in ipairs({char, mochila}) do
                    if container then
                        for _, item in ipairs(container:GetChildren()) do
                            if item:IsA("Tool") and temPollinated(item.Name) then
                                local weightObj = item:FindFirstChild("Weight")
                                if weightObj and weightObj:IsA("NumberValue") then
                                    table.insert(novaLista, {Tool = item, Weight = weightObj.Value})
                                end
                            end
                        end
                    end
                end

                table.sort(novaLista, function(a, b)
                    return a.Weight < b.Weight
                end)

                itensOrdenados = novaLista
                task.wait(2)
            end
        end)

        -- Interação com a máquina
        task.spawn(function()
            while ativo do
                local char = player.Character or player.CharacterAdded:Wait()
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                local label

                pcall(function()
                    label = workspace.HoneyEvent.HoneyCombpressor.Sign.SurfaceGui.TextLabel
                end)

                local listaLocal = table.clone(itensOrdenados)

                for _, itemData in ipairs(listaLocal) do
                    if not ativo then break end
                    local tool = itemData.Tool
                    if tool and tool.Parent and label then
                        local texto = label.Text
                        if texto == "READY" or texto:match("^%d*%.?%d+/10 KG$") then

                            if tool.Parent == player.Backpack or tool.Parent == player.Character then
                                local sucesso, erro = pcall(function()
                                    humanoid:EquipTool(tool)
                                end)

                                if sucesso then
                                    task.wait(0.1)
                                    ufav()
                                    rs.GameEvents.HoneyMachineService_RE:FireServer("MachineInteract")
                                    task.wait(0.6)
                                end
                            end

                        end
                    end
                end

                task.wait(0.5)
            end
        end)
    end


-- local script 


-- Services & Setup
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- Get player's farm
local function GetMyFarm()
    for _, farm in ipairs(workspace.Farm:GetChildren()) do
        local important = farm:FindFirstChild("Important")
        local data = important and important:FindFirstChild("Data")
        local owner = data and data:FindFirstChild("Owner")
        if owner and owner.Value == LocalPlayer.Name then
            return farm
        end
    end
    return nil
end

-- Get harvestable plants
local function GetHarvestablePlants()
    local character = LocalPlayer.Character
    if not character then return {} end

    local root = GetMyFarm()
    if not root then return {} end

    local plantFolder = root.Important:FindFirstChild("Plants_Physical")
    if not plantFolder then return {} end

    local plants = {}

    for _, model in pairs(plantFolder:GetDescendants()) do
        if model:IsA("ProximityPrompt") and model.Enabled then
            local parent = model.Parent
            table.insert(plants, parent.Parent)
        end
    end

    return plants
end

-- Harvest plants
local function HarvestPlants()
    for _, plantModel in ipairs(GetHarvestablePlants()) do
        pcall(function()
            ReplicatedStorage.ByteNetReliable:FireServer(buffer, { plantModel })
        end)
    end
end

-- UI Toggle
local autoCollectEnabled = false
local collectsection = main:AddSection("auto collect")
collectsection:AddToggle("autoCollectFruits", {
    Title = "Auto Collect All Fruits",
    Description = "auto collect",
    Default = false,
    Callback = function(state)
        autoCollectEnabled = state
        if state then
            task.spawn(function()
                while autoCollectEnabled do
                    HarvestPlants()
                    task.wait(1.5) -- adjust collection speed
                end
            end)
        end
    end
})












































local section = shop:AddSection("Seeds")

shop:AddToggle("", {
    Title = "Buy shop seed",
    Description = "Buy all shop seed",
    Default = false,
    Callback = function(Value)
        bsa = Value
    end
})

local dropdownSeed = shop:AddDropdown("DropdownSeed", {
    Title = "select the seeds u want to buy\n",
    Description = "select seeds\n",
    Values = byallseed,
    Multi = true,
    Default = {},
})

dropdownSeed:OnChanged(function(Value)
    selectedSeeds = {}
    for v, state in pairs(Value) do
        if state then
            table.insert(selectedSeeds, v)
        end
    end
end)
shop:AddToggle("", {
    Title = "Buy all seed",
    Description = "Buy all shop seed",
    Default = false,
    Callback = function()
        byallseedfc()
    end
})

local section = shop:AddSection("Gears")

shop:AddToggle("", {
    Title = "Buy shop gear",
    Description = "Buy shop gear",
    Default = false,
    Callback = function(Value)
        bsg = Value
    end
})

local dropdownGear = shop:AddDropdown("DropdownGear", {
    Title = "Select gear to buy\n",
    Description = "select gear to buy",
    Values = bygear,
    Multi = true,
    Default = {},
})

dropdownGear:OnChanged(function(Value)
    selectedGears = {}
    for v, state in pairs(Value) do
        if state then
            table.insert(selectedGears, v)
        end
    end
end)

shop:AddToggle("", {
    Title = "Buy all gear",
    Description = "Buy all shop gear",
    Default = false,
    Callback = function()
        byallgearfc()
    end
})

local section = shop:AddSection("Pets buy")

shop:AddButton({
        Title = "buy all eggs",
        Description = "buy all shop eggs",
        Callback = function()
            buypetegg()
        end
    })

shop:AddToggle("", {
        Title = "buy all eggs",
        Description = "auto se explica",
        Default = false,
        Callback = function(value)
         bsp = value
        end
    })

-- 

plant:AddButton({
    Title = "Set Plant position",
    Description = "Click to set both X and Y to current position",
    Callback = function()
        setplace()
    end
})

local Slider = plant:AddInput("StepInput", {
    Title = "distance Between Seeds",
    Description = "Enter the distance between the seeds (e.g., 0.005)",
    Placeholder = "1",
    Default = "1",
    Numeric = true,
    Callback = function(input)
        plantdistance(input)
    end
})

plant:AddButton({
    Title = "Click to Plant",
    Description = "Make sure you're holding a seed/tool",
    -- optional, use your global icon if you want
    Callback = function()
        plantfr()
    end
})

--
local SellSection = main:AddSection("Sell")

SellSection:AddButton({
    Title = "Sell all",
    Description = "sell all fruits in ur inventory",
    Callback = function()
        tsf()       
    end
})
SellSection:AddButton({
    Title = "sell in hand",
    Description= "sells the fruit ur holding",
    Callback = function()
bbf()
end
})


local selectedPetsToSell = {}

sell:AddDropdown("PetsToSellDropdown", {
    Title = "Select pets to auto-sell",
    Description = "Only exact pet names (ignores age/weight)",
    Values = petNames,
    Multi = true,
    Default = {}
}):OnChanged(function(selection)
    selectedPetsToSell = {}
    for name, isSelected in pairs(selection) do
        if isSelected then
            table.insert(selectedPetsToSell, name)
        end
    end
end)

local autoSellEnabled = false

SellSection:AddToggle("EnableAutoSellPets", {
    Title = "Auto Sell Selected Pets",
    Description = "Matches exact pet name only (ignores weight/age)",
    Default = false,
    Callback = function(state)
        sellpetssel(state)
    end
})




SellSection:AddButton({
    Title = "Sell Pet",
    Description = "Sells the pet you're holding",
    Callback = function()
        sellpets()
    end
})

--

playertab:AddInput("WalkSpeedInput", {
    Title = "WalkSpeed",
    Description = "Enter your desired walk speed",
    Placeholder = "Example: 100",
    Default = "20",
    Numeric = true,
    Callback = function(input)
        local value = tonumber(input)
        if value and game.Players.LocalPlayer.Character then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = value
                print("✔️ WalkSpeed set to:", value)
            end
        else
            warn("❌ Please enter a valid number")
        end
    end
})

--

function prefsh()
    PetsId = {}
    for _, child in ipairs(scrollingFrame:GetChildren()) do
        if child.Name ~= "PetTemplate" and child:FindFirstChild("PetStats") then
            table.insert(PetsId, child.Name)
        end
    end
    print("Updated pets:")
    for _, id in ipairs(PetsId) do
        print(id)
    end
    return PetsId
end

local pDropdown = pet:AddDropdown("Dropdown", {
    Title = "choose the pet to auto feed\n",
    Description = "auto feed pet\n",
    Values = {},
    Multi = false,
    Default = nil,
})

local function updatePetDropdown()
    local pets = prefsh()
    pDropdown:SetValues(pets)
    if #pets > 0 then
        pDropdown:SetValue(pets[1])
    end
end

pet:AddButton({
    Title = "update pets",
    Description = "update pets",
    Callback = function()
        updatePetDropdown()
    end
})

local pfeed

pDropdown:OnChanged(function(Value)
    pfeed = Value
    print("select pet:", pfeed)
end)

updatePetDropdown()


local autoFeed = false

pet:AddToggle("AutoFeedToggle", {
    Title = "auto feed\n",
    Description = "feeds the pet with the fruit in ur hand",
    Default = false,
    Callback = function(Value)
        feedpet(Value)
    end
})

pet:AddButton({
    Title = "feed selected pet",
    Description = "takes the food in ur hand",
    Callback = function()
        if pfeed then
            feedsc:FireServer("Feed", pfeed)
            print("pet:", pfeed)
        else
            print("select a pet first")
        end
    end
})


local eggEspEnabled = false
local autoHatchEnabled = false
local labelCache = {}
local trackedEggs = {}
local hatchedEggs = {}
local connections = {}

local petSection = pet:AddSection("Egg ESP & Auto Hatch")

local rs = game:GetService("ReplicatedStorage")
local cs = game:GetService("CollectionService")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local lp = players.LocalPlayer
local cam = workspace.CurrentCamera
local starterGui = game:GetService("StarterGui")

-- Safely get upvalues and hook function
local fnHatch = nil
local petList = {}
local eggList = {}

pcall(function()
	local conn = getconnections(rs.GameEvents.PetEggService.OnClientEvent)[1]
	if conn and typeof(conn.Function) == "function" then
		fnHatch = getupvalue(getupvalue(conn.Function, 1), 2)
		eggList = getupvalue(fnHatch, 1)
		petList = getupvalue(fnHatch, 2)
	end
end)

local function findEggById(uuid)
	for _, egg in pairs(eggList) do
		if egg:GetAttribute("OBJECT_UUID") == uuid then
			return egg
		end
	end
end

local function notify(title, text)
	pcall(function()
		starterGui:SetCore("SendNotification", {
			Title = title,
			Text = text,
			Duration = 5
		})
	end)
end

local function refreshLabel(uuid, pet)
    local model = findEggById(uuid)
    if model and labelCache[uuid] then
        local eggType = model:GetAttribute("EggName")
        labelCache[uuid].Text = tostring(eggType) .. " | " .. tostring(pet)
    end

    if autoHatchEnabled and model and not hatchedEggs[uuid] then
        hatchedEggs[uuid] = true
        task.spawn(function()
            rs.GameEvents.PetEggService:FireServer("HatchPet", model)
            notify("Auto Hatch", "🥚 Hatched: " .. tostring(pet))
        end)
    end
end

local function updateLabels()
    for uuid, model in pairs(trackedEggs) do
        local lbl = labelCache[uuid]
        if not model or not model:IsDescendantOf(workspace) then
            if lbl then lbl.Visible = false end
            trackedEggs[uuid] = nil
        else
            if lbl and eggEspEnabled then
                local pos, visible = cam:WorldToViewportPoint(model:GetPivot().Position)
                lbl.Position = Vector2.new(pos.X, pos.Y)
                lbl.Visible = visible
            elseif lbl then
                lbl.Visible = false
            end

            -- Auto hatch if ESP is off
            local petName = petList[uuid]
            if autoHatchEnabled and petName and not hatchedEggs[uuid] then
                hatchedEggs[uuid] = true
                task.spawn(function()
                    rs.GameEvents.PetEggService:FireServer("HatchPet", model)
                    notify("Auto Hatch", "🥚 Hatched: " .. tostring(petName))
                end)
            end
        end
    end
end

local function createLabel(model)
    if model:GetAttribute("OWNER") ~= lp.Name then return end
    local uuid = model:GetAttribute("OBJECT_UUID")
    if not uuid then return end

    if not trackedEggs[uuid] then
        trackedEggs[uuid] = model
    end

    if eggEspEnabled and not labelCache[uuid] then
        local eggType = model:GetAttribute("EggName")
        local petName = petList[uuid]

        local txt = Drawing.new("Text")
        txt.Text = tostring(eggType) .. " | " .. tostring(petName or "not ready yet")
        txt.Size = 18
        txt.Color = Color3.new(1, 1, 1)
        txt.Outline = true
        txt.OutlineColor = Color3.new(0, 0, 0)
        txt.Center = true
        txt.Visible = false

        labelCache[uuid] = txt
    end
end
local function removeLabel(model)
    local uuid = model:GetAttribute("OBJECT_UUID")
    if uuid then
        if labelCache[uuid] then
            labelCache[uuid]:Remove()
            labelCache[uuid] = nil
        end
        trackedEggs[uuid] = nil
    end
end

-- ✅ Safe hook
pcall(function()
    local conn = getconnections(rs.GameEvents.EggReadyToHatch_RE.OnClientEvent)[1]
    if conn and typeof(conn.Function) == "function" then
        local original = conn.Function
        hookfunction(original, newcclosure(function(uuid, pet)
            refreshLabel(uuid, pet)
            return original(uuid, pet)
        end))
    end
end)
-- ✅ ESP Toggle
pet:AddToggle("eggEspToggle", {
	Title = "Egg ESP",
	Default = false,
	Callback = function(state)
		eggEspEnabled = state

		if not state then
			for _, lbl in pairs(labelCache) do if lbl.Remove then lbl:Remove() end end
			labelCache = {}
		else
			for _, inst in cs:GetTagged("PetEggServer") do
				task.spawn(createLabel, inst)
			end
		end
	end
})

-- ✅ Auto Hatch Toggle
pet:AddToggle("autoHatchToggle", {
	Title = "Auto Hatch Eggs",
	Default = false,
	Callback = function(state)
		autoHatchEnabled = state

		if state then
			for _, inst in cs:GetTagged("PetEggServer") do
				task.spawn(createLabel, inst)
			end
		end
	end
})

-- ⏳ Always track new eggs
table.insert(connections, cs:GetInstanceAddedSignal("PetEggServer"):Connect(createLabel))
table.insert(connections, cs:GetInstanceRemovedSignal("PetEggServer"):Connect(removeLabel))
table.insert(connections, runService.PreRender:Connect(updateLabels))


--

ui:AddSection("UIs")

ui:AddButton({
    Title = "Cosmetic Shop UI",
    Description = "opens cosmetics ui",
    Callback = function()
        local ui = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("CosmeticShop_UI")
        if ui then
            ui.Enabled = not ui.Enabled
            print("Cosmetic Shop UI:", ui.Enabled and "Ativada" or "Desativada")
        end
    end
})


ui:AddButton({
    Title = "Gear Shop UI",
    Description = "opens gear shop ui",
    Callback = function()
        local ui = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Gear_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
            print("Gear Shop UI:", ui.Enabled and "Ativada" or "Desativada")
        end
    end
})


ui:AddButton({
    Title = "Seed Shop UI",
    Description = "opens seed shop ui",
    Callback = function()
        local ui = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Seed_Shop")
        if ui then
            ui.Enabled = not ui.Enabled
            print("Seed Shop UI:", ui.Enabled and "Ativada" or "Desativada")
        end
    end
})

ui:AddButton({
    Title = "Daily quest UI",
    Description = "opens daily quest ui",
    Callback = function()
        local ui = game:GetService("Players").LocalPlayer.PlayerGui.DailyQuests_UI
        if ui then
            ui.Enabled = not ui.Enabled
            print("Daily Quest UI:", ui.Enabled and "Ativada" or "Desativada")
        end
    end
})

--

local section = event:AddSection("Honey event")
local ativo = false
local itensOrdenados = {}

event:AddToggle("auto give pollinated fruit", {
    Title = "auto give pollinated fruits",
    Description = "Equip only Pollinated items and interact with the event machine (sorted by weight)",
    Default = false,
    Callback = function(toggle)
        pollinated(toggle)
    end
})

event:AddButton({
    Title = "Honey Shop UI | Not Patched!!!!",
    Description = "opens the honey shop ui",
    Callback = function()
        local ui = game:GetService("Players").LocalPlayer.PlayerGui.HoneyEventShop_UI
        if ui then
            ui.Enabled = not ui.Enabled
            print("Honey Shop UI:", ui.Enabled and "Ativada" or "Desativada")
        end
    end
})

local byallBee = { "Flower Seed Pack", "Lavender", "Nectarshade", "Nectarine", "Hive Fruit", "Pollen Radar", "Nectar Staff", "Honey Sprinkler", "Bee Egg", "Bee Crate", "Honey Comb", "Bee Chair", "Honey Torch", "Honey Walkway" }

local buyBee = game:GetService("ReplicatedStorage").GameEvents.BuyEventShopStock
local selectedBees = {}
local bsb = false

function byallbeefc()
    for i = 1, 25 do
        for _, bee in ipairs(selectedBees) do
            buyBee:FireServer(bee)
            task.wait()
        end
    end
end

local section = event:AddSection("honey shop")

event:AddToggle("", {
    Title = "Buy all honey Shop",
    Description = "Buy all honey shop",
    Default = false,
    Callback = function(Value)
        bsb = Value
    end
})

local dropdownBee = event:AddDropdown("DropdownSeed", {
    Title = "select honey items \n",
    Description = "select honey items to buy\n",
    Values = byallBee,
    Multi = true,
    Default = {},
})

dropdownBee:OnChanged(function(Value)
    selectedBees = {}
    for beeName, selected in pairs(Value) do
        if selected then
            table.insert(selectedBees, beeName)
        end
    end
end)

task.spawn(function()
    local lastMinute = -1
    while true do
        local minutos = os.date("*t").min
        if minutos ~= lastMinute then
            lastMinute = minutos

            if bsb then
                byallbeefc()
            end
            if bsm then
                byallmoonfc()
            end
            if bsm2 then
                byallmoon2fc()
            end
        end
        task.wait(1)
    end
end)
local section = event:AddSection("summer event")
local ativo = false

event:AddToggle("auto submit", {
    Title = "auto summer event",
    Description = "submit all summer fruits",
    Default = false,
    Callback = function(toggle)
        ativo = toggle
        if not toggle then return end

        task.spawn(function()
            while ativo do
                local args = {
                    "SubmitAllPlants"
                }
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("SummerHarvestRemoteEvent"):FireServer(unpack(args))
                task.wait(5) -- now waits 5 seconds
            end
        end)
    end
})
--


--
local versgame = (game:GetService("Players").LocalPlayer.PlayerGui.Version_UI.Version.Text):gsub("^v", "")

function svvererr(v)
    local newv = tonumber(v)
    local numvers = tonumber(versgame)
    if numvers and newv and numvers > newv then
        Fluent:Notify({
            Title = "wrong server version",
            Content = "current server version: " .. versgame,
            SubContent = "version needed: " .. newv .. " or less!",
            Duration = 5
        })
    end
end



vuln:AddParagraph({
        Title = "server version: ", Content = versgame
    })

vuln:AddButton({
    Title = "Gear skip",
    Description = "skip gear timer",
    Callback = function()
        svvererr(1349)
        local args = {
            [1] = "Claim",
            [2] = workspace.Interaction.UpdateItems.NewCrafting.EventCraftingWorkBench,
            [3] = "GearEventWorkbench",
            [4] = 1
        }

        game:GetService("ReplicatedStorage").GameEvents.CraftingGlobalObjectService:FireServer(unpack(args))
    end
})

vuln:AddButton({
    Title = "Seed skip ",
    Description = "skip seed crafter timer",
    Callback = function()
        svvererr(1349)
        local args = {
            [1] = "Claim",
            [2] = workspace.Interaction.UpdateItems.NewCrafting.SeedEventCraftingWorkBench,
            [3] = "SeedEventWorkbench",
            [4] = 1
        }

        game:GetService("ReplicatedStorage").GameEvents.CraftingGlobalObjectService:FireServer(unpack(args))
    end
})






task.spawn(function()
    local lastMinute = -1
    while true do
        local minutos = os.date("*t").min
        if minutos ~= lastMinute then
            lastMinute = minutos

            if bsa then
                task.spawn(byallseedfc)
            end
            if bsg then
                task.spawn(byallgearfc)
            end
            if bsp then
                task.spawn(buypetegg)
            end
        end
        task.wait(1)
    end
end)

game:GetService("Players").LocalPlayer.Idled:Connect(function()
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    local VirtualUser = game:GetService("VirtualUser")
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)
